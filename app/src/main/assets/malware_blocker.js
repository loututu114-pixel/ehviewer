// ==UserScript==
// @name         EhViewer 恶意软件深度拦截器
// @namespace    http://ehviewer.com/
// @version      1.5.0
// @description  专门拦截360安全卫士等恶意软件推广，保护用户免受垃圾软件侵扰
// @author       EhViewer Team
// @match        *://*/*
// @exclude      *://*.google.com/*
// @exclude      *://*.baidu.com/*
// @exclude      *://*.zhihu.com/*
// @grant        GM_getValue
// @grant        GM_setValue
// @grant        GM_addStyle
// @grant        GM_log
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function() {
    'use strict';

    GM_log('EhViewer 恶意软件深度拦截器已启动');

    // 恶意软件数据库 - 持续更新
    const malwareDatabase = {
        // 360系列 - 最恶心的垃圾软件
        '360': [
            '360安全卫士', '360安全浏览器', '360杀毒', '360加速器', '360压缩',
            '360驱动', '360手机卫士', '360清理大师', '360软件管家',
            '360金山毒霸', '360上网导航', '360安全下载', '360手游',
            '360游戏大厅', '360云盘', '360浏览器', '360搜索', '360网址导航'
        ],

        // 金山系列
        'kingsoft': [
            '金山毒霸', '金山卫士', '金山清理专家', '金山驱动精灵',
            '金山系统急救箱', '金山电池医生', '金山网盾', '金山安全软件'
        ],

        // 百度系列
        'baidu': [
            '百度卫士', '百度杀毒', '百度浏览器', '百度输入法',
            '百度网盘', '百度音乐', '百度视频', '百度地图',
            '百度手机卫士', '百度手机助手', '百度手机浏览器'
        ],

        // 腾讯系列
        'tencent': [
            '腾讯电脑管家', '腾讯视频', 'QQ浏览器', '微信',
            'QQ音乐', 'QQ游戏', 'QQ空间', '腾讯游戏'
        ],

        // 搜狗系列
        'sogou': [
            '搜狗输入法', '搜狗浏览器', '搜狗高速下载', '搜狗拼音',
            '搜狗五笔', '搜狗词库', '搜狗壁纸', '搜狗截图'
        ],

        // 猎豹系列
        'liebao': [
            '猎豹浏览器', '猎豹清理大师', '猎豹安全浏览器',
            '猎豹WiFi大师', '猎豹语音助手'
        ],

        // 2345系列
        '2345': [
            '2345加速浏览器', '2345王牌助手', '2345好压',
            '2345看图王', '2345播放器', '2345安全卫士'
        ],

        // 其他恶心软件
        'other': [
            '迅雷看看', '迅雷影音', '迅雷游戏', '迅雷直播',
            '暴风影音', '暴风云', '暴风游戏',
            '快压', '好压', '2345好压', '360压缩',
            '驱动精灵', '驱动人生', '驱动总裁',
            '鲁大师', '电脑管家', '软件管家',
            '超级兔子', '优化大师', '系统优化',
            '免费杀毒', '免费安全软件', '安全卫士'
        ],

        // 流氓推广
        'promotion': [
            '安全下载', '高速下载', '下载大师', '下载加速器',
            '游戏加速器', '网游加速器', '手游加速器',
            '系统优化', '系统清理', '系统加速',
            '免费杀毒', '免费杀毒软件', '免费安全软件',
            '安全上网', '上网加速', '网络优化'
        ]
    };

    // 恶意域名列表
    const malwareDomains = [
        '360.cn', '360.com', '360safe.com', '360.cn',
        'kingsoft.com', 'duba.net', 'kingsoft.com',
        'baidu.com', 'baidusec.com', 'baidu.cn',
        'qq.com', 'tencent.com', 'weixin.qq.com',
        'sogou.com', 'soso.com', 'sogoucdn.com',
        'liebao.cn', 'lb.cn', 'liebao.com',
        '2345.com', '2345.cn', 'mypc.cn',
        'xunlei.com', 'thunder.com', 'xunlei.cn',
        'baofeng.com', 'baofeng.cn', 'storm.com',
        'kuaizip.com', 'goodpress.com', '2345goodpress.com',
        'drivergenius.com', 'driver.com', 'qudong.com',
        'ludashi.com', 'pcbutler.com', 'pcbutler.cn'
    ];

    // 配置选项
    const config = {
        enabled: GM_getValue('malwareBlockerEnabled', true),
        strictMode: GM_getValue('malwareStrictMode', false),
        showWarnings: GM_getValue('malwareShowWarnings', true),
        autoReport: GM_getValue('malwareAutoReport', false),
        customRules: GM_getValue('malwareCustomRules', [])
    };

    // 统计数据
    let stats = {
        blockedElements: 0,
        blockedLinks: 0,
        blockedPopups: 0,
        lastUpdate: Date.now()
    };

    // 创建拦截控制面板
    function createMalwareBlockerPanel() {
        const panel = document.createElement('div');
        panel.id = 'ehviewer-malware-panel';
        panel.innerHTML = `
            <div style="position: fixed; bottom: 20px; right: 20px; z-index: 10000;
                        background: linear-gradient(135deg, #FF4757, #FF3838); color: white;
                        padding: 12px; border-radius: 8px; font-size: 11px; font-family: Arial;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.3); min-width: 180px;">
                <div style="display: flex; align-items: center; margin-bottom: 8px;">
                    <span style="font-size: 16px; margin-right: 6px;">🛡️</span>
                    <strong>恶意软件拦截器</strong>
                </div>
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 4px; margin-bottom: 8px;">
                    <button id="scan-malware" title="扫描恶意软件">🔍</button>
                    <button id="block-all" title="拦截所有">🚫</button>
                    <button id="clean-page" title="清理页面">🧹</button>
                    <button id="strict-mode" title="严格模式">⚠️</button>
                    <button id="report-mode" title="报告模式">📊</button>
                    <button id="settings-btn" title="设置">⚙️</button>
                </div>
                <div style="font-size: 9px; color: rgba(255,255,255,0.8); text-align: center;
                           border-top: 1px solid rgba(255,255,255,0.2); padding-top: 4px;">
                    已拦截: ${stats.blockedElements + stats.blockedLinks} 个
                </div>
            </div>
        `;
        document.body.appendChild(panel);

        // 绑定事件
        document.getElementById('scan-malware').onclick = () => scanForMalware();
        document.getElementById('block-all').onclick = () => blockAllMalware();
        document.getElementById('clean-page').onclick = () => cleanPage();
        document.getElementById('strict-mode').onclick = () => toggleStrictMode();
        document.getElementById('report-mode').onclick = () => showReport();
        document.getElementById('settings-btn').onclick = showMalwareSettings;
    }

    // 深度扫描恶意软件
    function scanForMalware() {
        GM_log('开始深度扫描恶意软件...');

        const scanResults = {
            found: [],
            blocked: 0,
            suspicious: 0
        };

        // 扫描页面文本内容
        scanPageContent(scanResults);

        // 扫描链接
        scanLinks(scanResults);

        // 扫描图片和资源
        scanResources(scanResults);

        // 显示扫描结果
        showScanResults(scanResults);

        GM_log(`扫描完成，发现 ${scanResults.found.length} 个恶意软件元素`);
    }

    function scanPageContent(results) {
        const allText = document.body.textContent;
        const allElements = document.querySelectorAll('*');

        allElements.forEach(element => {
            const text = element.textContent || '';
            if (text.length > 0) {
                const foundMalware = checkForMalware(text);
                if (foundMalware.length > 0) {
                    results.found.push({
                        element: element,
                        type: 'text',
                        malware: foundMalware,
                        text: text.substring(0, 100)
                    });

                    // 在严格模式下立即隐藏
                    if (config.strictMode) {
                        element.style.display = 'none';
                        results.blocked++;
                        stats.blockedElements++;
                    }
                }
            }
        });
    }

    function scanLinks(results) {
        const links = document.querySelectorAll('a[href]');
        links.forEach(link => {
            const href = link.href.toLowerCase();
            const text = link.textContent.toLowerCase();

            // 检查链接文本
            const textMalware = checkForMalware(text);
            if (textMalware.length > 0) {
                results.found.push({
                    element: link,
                    type: 'link-text',
                    malware: textMalware,
                    url: href
                });
            }

            // 检查链接URL
            const isMalwareDomain = malwareDomains.some(domain =>
                href.includes(domain)
            );

            if (isMalwareDomain) {
                results.found.push({
                    element: link,
                    type: 'link-url',
                    malware: ['恶意域名'],
                    url: href
                });

                // 拦截恶意链接
                link.style.textDecoration = 'line-through';
                link.style.color = '#dc3545';
                link.title = '⚠️ 此链接已被拦截（恶意软件）';

                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    showMalwareWarning(href);
                });

                results.blocked++;
                stats.blockedLinks++;
            }
        });
    }

    function scanResources(results) {
        // 扫描图片资源
        const images = document.querySelectorAll('img[src]');
        images.forEach(img => {
            const src = img.src.toLowerCase();
            const isMalwareImage = malwareDomains.some(domain =>
                src.includes(domain)
            );

            if (isMalwareImage) {
                results.found.push({
                    element: img,
                    type: 'image',
                    malware: ['恶意图片资源'],
                    url: src
                });

                if (config.strictMode) {
                    img.style.display = 'none';
                    results.blocked++;
                }
            }
        });

        // 扫描脚本资源
        const scripts = document.querySelectorAll('script[src]');
        scripts.forEach(script => {
            const src = script.src.toLowerCase();
            const isMalwareScript = malwareDomains.some(domain =>
                src.includes(domain)
            );

            if (isMalwareScript) {
                results.found.push({
                    element: script,
                    type: 'script',
                    malware: ['恶意脚本'],
                    url: src
                });

                script.remove();
                results.blocked++;
                GM_log('移除恶意脚本: ' + src);
            }
        });
    }

    function checkForMalware(text) {
        const found = [];
        const lowerText = text.toLowerCase();

        Object.values(malwareDatabase).forEach(category => {
            category.forEach(malware => {
                if (lowerText.includes(malware.toLowerCase())) {
                    found.push(malware);
                }
            });
        });

        // 检查自定义规则
        config.customRules.forEach(rule => {
            if (lowerText.includes(rule.toLowerCase())) {
                found.push('自定义规则: ' + rule);
            }
        });

        return [...new Set(found)]; // 去重
    }

    function showScanResults(results) {
        const resultDiv = document.createElement('div');
        resultDiv.innerHTML = `
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                        background: white; border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                        z-index: 10001; max-width: 500px; max-height: 70vh; overflow-y: auto;">
                <div style="padding: 20px; border-bottom: 1px solid #eee;">
                    <h3 style="margin: 0 0 10px 0; color: #333;">🛡️ 恶意软件扫描结果</h3>
                    <div style="display: flex; gap: 15px; font-size: 14px;">
                        <span style="color: #dc3545;">发现: ${results.found.length}</span>
                        <span style="color: #ffc107;">拦截: ${results.blocked}</span>
                        <span style="color: #28a745;">可疑: ${results.suspicious}</span>
                    </div>
                </div>
                <div style="padding: 20px;">
                    ${results.found.length > 0 ?
                        results.found.slice(0, 10).map(item => `
                            <div style="margin-bottom: 12px; padding: 10px; background: #f8f9fa;
                                       border-radius: 6px; border-left: 3px solid #dc3545;">
                                <div style="font-weight: bold; color: #dc3545; margin-bottom: 4px;">
                                    ${item.malware.join(', ')}
                                </div>
                                <div style="font-size: 12px; color: #666;">
                                    类型: ${item.type} | 内容: ${item.text || item.url}
                                </div>
                            </div>
                        `).join('') :
                        '<div style="text-align: center; color: #28a745; padding: 20px;">🎉 未发现恶意软件！</div>'
                    }
                    ${results.found.length > 10 ?
                        `<div style="text-align: center; color: #666; margin-top: 10px;">
                            ... 还有 ${results.found.length - 10} 个结果
                        </div>` : ''
                    }
                </div>
                <div style="padding: 15px; border-top: 1px solid #eee; text-align: right;">
                    <button onclick="this.parentElement.parentElement.remove()"
                            style="padding: 8px 16px; background: #6c757d; color: white;
                                   border: none; border-radius: 5px; cursor: pointer;">
                        关闭
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(resultDiv);
    }

    // 拦截所有恶意软件
    function blockAllMalware() {
        const allElements = document.querySelectorAll('*');
        let blockedCount = 0;

        allElements.forEach(element => {
            const text = element.textContent || '';
            const foundMalware = checkForMalware(text);

            if (foundMalware.length > 0) {
                element.style.display = 'none';
                blockedCount++;
                stats.blockedElements++;
            }
        });

        // 拦截所有可疑链接
        const links = document.querySelectorAll('a[href]');
        links.forEach(link => {
            const href = link.href.toLowerCase();
            const isMalwareDomain = malwareDomains.some(domain =>
                href.includes(domain)
            );

            if (isMalwareDomain) {
                link.style.display = 'none';
                blockedCount++;
                stats.blockedLinks++;
            }
        });

        showNotification(`已拦截 ${blockedCount} 个恶意软件元素`, 'success');
        GM_log(`批量拦截完成，共处理 ${blockedCount} 个元素`);
    }

    // 清理页面
    function cleanPage() {
        // 移除所有恶意元素
        blockAllMalware();

        // 清理弹窗
        const popups = document.querySelectorAll('.popup, .modal, .overlay, .dialog');
        popups.forEach(popup => {
            if (popup.offsetParent) {
                popup.remove();
                stats.blockedPopups++;
            }
        });

        // 清理广告
        const ads = document.querySelectorAll('[class*="ad"], [id*="ad"], .advertisement');
        ads.forEach(ad => ad.remove());

        showNotification('页面清理完成！', 'success');
    }

    // 严格模式切换
    function toggleStrictMode() {
        config.strictMode = !config.strictMode;
        GM_setValue('malwareStrictMode', config.strictMode);

        const button = document.getElementById('strict-mode');
        if (button) {
            button.textContent = config.strictMode ? '🔒' : '⚠️';
            button.title = config.strictMode ? '严格模式已启用' : '普通模式';
        }

        showNotification(
            config.strictMode ? '严格模式已启用，将自动隐藏所有可疑内容' : '普通模式已启用，只标记可疑内容',
            'info'
        );
    }

    // 显示报告
    function showReport() {
        const reportDiv = document.createElement('div');
        reportDiv.innerHTML = `
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                        background: white; border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                        z-index: 10001; max-width: 400px;">
                <div style="padding: 20px; border-bottom: 1px solid #eee;">
                    <h3 style="margin: 0 0 15px 0; color: #333;">📊 拦截报告</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; text-align: center;">
                        <div>
                            <div style="font-size: 24px; color: #dc3545;">${stats.blockedElements}</div>
                            <div style="font-size: 12px; color: #666;">拦截元素</div>
                        </div>
                        <div>
                            <div style="font-size: 24px; color: #ffc107;">${stats.blockedLinks}</div>
                            <div style="font-size: 12px; color: #666;">拦截链接</div>
                        </div>
                        <div>
                            <div style="font-size: 24px; color: #28a745;">${stats.blockedPopups}</div>
                            <div style="font-size: 12px; color: #666;">拦截弹窗</div>
                        </div>
                        <div>
                            <div style="font-size: 24px; color: #17a2b8;">${Date.now() - stats.lastUpdate > 86400000 ? Math.floor((Date.now() - stats.lastUpdate) / 86400000) : 0}</div>
                            <div style="font-size: 12px; color: #666;">运行天数</div>
                        </div>
                    </div>
                </div>
                <div style="padding: 15px; text-align: right;">
                    <button onclick="this.parentElement.parentElement.remove()"
                            style="padding: 8px 16px; background: #6c757d; color: white;
                                   border: none; border-radius: 5px; cursor: pointer;">
                        关闭
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(reportDiv);
    }

    // 设置面板
    function showMalwareSettings() {
        const settings = document.createElement('div');
        settings.innerHTML = `
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                        background: white; padding: 25px; border-radius: 12px; z-index: 10001;
                        box-shadow: 0 6px 24px rgba(0,0,0,0.3); max-width: 500px;">
                <h3 style="margin: 0 0 20px 0; color: #333; text-align: center;">恶意软件拦截器设置</h3>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 20px;">
                    <label style="display: flex; align-items: center;">
                        <input type="checkbox" id="setting-enabled" style="margin-right: 8px;" ${config.enabled ? 'checked' : ''}>
                        启用拦截器
                    </label>
                    <label style="display: flex; align-items: center;">
                        <input type="checkbox" id="setting-strict" style="margin-right: 8px;" ${config.strictMode ? 'checked' : ''}>
                        严格模式
                    </label>
                    <label style="display: flex; align-items: center;">
                        <input type="checkbox" id="setting-warnings" style="margin-right: 8px;" ${config.showWarnings ? 'checked' : ''}>
                        显示警告
                    </label>
                    <label style="display: flex; align-items: center;">
                        <input type="checkbox" id="setting-report" style="margin-right: 8px;" ${config.autoReport ? 'checked' : ''}>
                        自动报告
                    </label>
                </div>

                <div style="border-top: 1px solid #dee2e6; padding-top: 15px; margin-bottom: 20px;">
                    <h4 style="margin: 0 0 10px 0; color: #666;">自定义拦截规则</h4>
                    <textarea id="custom-rules" placeholder="每行一个关键词" rows="4"
                              style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; resize: vertical;">${config.customRules.join('\n')}</textarea>
                    <div style="font-size: 12px; color: #666; margin-top: 5px;">
                        添加自定义的恶意软件关键词，每行一个
                    </div>
                </div>

                <div style="text-align: right;">
                    <button id="reset-malware-settings" style="margin-right: 10px; padding: 8px 15px;
                                                    background: #ffc107; color: black; border: none;
                                                    border-radius: 5px; cursor: pointer;">
                        重置设置
                    </button>
                    <button id="save-malware-settings" style="padding: 8px 15px;
                                                    background: #FF4757; color: white; border: none;
                                                    border-radius: 5px; cursor: pointer;">
                        保存设置
                    </button>
                    <button id="close-malware-settings" style="margin-left: 10px; padding: 8px 15px;
                                                     background: #6c757d; color: white; border: none;
                                                     border-radius: 5px; cursor: pointer;">
                        关闭
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(settings);

        document.getElementById('save-malware-settings').onclick = saveMalwareSettings;
        document.getElementById('reset-malware-settings').onclick = resetMalwareSettings;
        document.getElementById('close-malware-settings').onclick = () => settings.remove();
    }

    function saveMalwareSettings() {
        config.enabled = document.getElementById('setting-enabled').checked;
        config.strictMode = document.getElementById('setting-strict').checked;
        config.showWarnings = document.getElementById('setting-warnings').checked;
        config.autoReport = document.getElementById('setting-report').checked;

        const customRulesText = document.getElementById('custom-rules').value;
        config.customRules = customRulesText.split('\n').filter(rule => rule.trim());

        // 保存设置
        Object.keys(config).forEach(key => {
            GM_setValue('malware' + key.charAt(0).toUpperCase() + key.slice(1), config[key]);
        });

        location.reload();
    }

    function resetMalwareSettings() {
        if (confirm('确定要重置所有设置为默认值吗？')) {
            GM_setValue('malwareBlockerEnabled', true);
            GM_setValue('malwareStrictMode', false);
            GM_setValue('malwareShowWarnings', true);
            GM_setValue('malwareAutoReport', false);
            GM_setValue('malwareCustomRules', []);

            location.reload();
        }
    }

    // 恶意软件警告
    function showMalwareWarning(url) {
        if (!config.showWarnings) return;

        const warning = document.createElement('div');
        warning.innerHTML = `
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                        background: white; border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                        z-index: 10001; max-width: 400px; text-align: center;">
                <div style="padding: 30px 20px;">
                    <div style="font-size: 48px; margin-bottom: 15px;">⚠️</div>
                    <h3 style="margin: 0 0 15px 0; color: #dc3545;">检测到恶意软件链接</h3>
                    <p style="margin: 0 0 20px 0; color: #666; line-height: 1.5;">
                        该链接可能包含恶意软件或捆绑安装程序，<br>
                        建议不要下载或访问此链接。
                    </p>
                    <div style="font-size: 12px; color: #999; margin-bottom: 20px; word-break: break-all;">
                        ${url}
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()"
                            style="padding: 10px 25px; background: #6c757d; color: white;
                                   border: none; border-radius: 6px; cursor: pointer;">
                        我知道了
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(warning);
    }

    // 通知系统
    function showNotification(message, type = 'info') {
        const colors = {
            success: '#28a745',
            error: '#dc3545',
            warning: '#ffc107',
            info: '#17a2b8'
        };

        const notification = document.createElement('div');
        notification.innerHTML = `
            <div style="position: fixed; top: 20px; left: 50%; transform: translateX(-50%);
                        background: ${colors[type]}; color: white; padding: 12px 24px;
                        border-radius: 8px; z-index: 10001; box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                        font-size: 14px; font-weight: bold;">
                ${message}
            </div>
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
    }

    // 键盘快捷键
    function setupKeyboardShortcuts() {
        document.addEventListener('keydown', function(e) {
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;

            // Ctrl+Shift+M - 扫描恶意软件
            if (e.ctrlKey && e.shiftKey && e.keyCode === 77) {
                e.preventDefault();
                scanForMalware();
            }

            // Ctrl+Shift+B - 拦截所有恶意软件
            if (e.ctrlKey && e.shiftKey && e.keyCode === 66) {
                e.preventDefault();
                blockAllMalware();
            }

            // Ctrl+Shift+C - 清理页面
            if (e.ctrlKey && e.shiftKey && e.keyCode === 67) {
                e.preventDefault();
                cleanPage();
            }
        });
    }

    // 自动更新恶意软件数据库
    function updateMalwareDatabase() {
        // 这里可以添加自动更新逻辑
        // 从服务器获取最新的恶意软件数据库
        GM_log('恶意软件数据库检查更新...');
    }

    // 保存统计数据
    function saveStats() {
        GM_setValue('malwareStats', stats);
    }

    // 初始化
    function init() {
        if (!config.enabled) {
            GM_log('恶意软件拦截器已禁用');
            return;
        }

        setTimeout(() => {
            createMalwareBlockerPanel();
            setupKeyboardShortcuts();

            // 加载已保存的统计数据
            const savedStats = GM_getValue('malwareStats', {});
            Object.assign(stats, savedStats);

            // 自动扫描（延迟执行）
            setTimeout(() => {
                if (config.strictMode) {
                    scanForMalware();
                }
            }, 3000);

            GM_log('EhViewer 恶意软件深度拦截器初始化完成');
        }, 1000);

        // 定期保存统计
        setInterval(saveStats, 30000);
    }

    // 页面加载完成后初始化
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();
